name: 'Sign File'

description: 'Sign a file using SSL.com CodeSignTool'

inputs:
  filepath:
    description: 'File to be signed'
    required: true
    # default: 'World'
  sslusername:
    description: 'SSL.com account username'
    required: true
  sslpassword:
    description: 'SSL.com account password'
    required: true
  sslsecretpassword:
    description: 'SSL.com account TOTP secret'
    required: true
  istest:
    description: 'When true, runs against SSL.com sandbox account'
    required: false
    default: false
runs:
  using: 'composite'
  steps:
    - name: Add masks
      run: |
        echo "::add-mask::${{ inputs.sslusername }}"
        echo "::add-mask::${{ inputs.sslsecretpassword }}"
        echo "::add-mask::totp_secret"
      shell: bash
    - name: Download and Setup CodeSignTool
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          choco install javaruntime
          
          if [ ! -d "CodeSignTool-v1.2.0-windows" ]; then
            curl https://www.ssl.com/download/29773/ --output CodeSignTool.zip
            7z x CodeSignTool.zip
            
            cd CodeSignTool-v1.2.0-windows
            mkdir -p "ssl-output"
          fi
        else
          sudo apt-get install -y unzip
          sudo apt-get install -y default-jre

          if [ ! -d "CodeSignTool-v1.2.0" ]; then
            curl https://www.ssl.com/download/29764/ --output CodeSignTool.zip
            unzip -o CodeSignTool.zip

            cd CodeSignTool-v1.2.0
            mkdir -p "ssl-output"
          fi
        fi
      shell: bash
    - name: Sign File(s) Bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          cd CodeSignTool-v1.2.0

          if [ ${{ inputs.istest }} = true ] ; then

            # TESTING ONLY - Sandbox creds

            printf "CLIENT_ID=qOUeZCCzSqgA93acB3LYq6lBNjgZdiOxQc-KayC3UMw\nOAUTH2_ENDPOINT=https://oauth-sandbox.ssl.com/oauth2/token\nCSC_API_ENDPOINT=https://cs-try.ssl.com\nTSA_URL=http://ts.ssl.com" > 'conf/code_sign_tool.properties'
            bash -eu CodeSignTool.sh sign -username="esigner_demo" -password='esignerDemo#1' -totp_secret="RDXYgV9qju+6/7GnMf1vCbKexXVJmUVr+86Wq/8aIGg=" -input_file_path="${{ inputs.filepath }}" -output_dir_path="ssl-output"

          else

            # SINGLE FILE
            bash -eu CodeSignTool.sh sign -username="${{ inputs.sslusername }}" -password='${{ inputs.sslpassword }}' -totp_secret="${{ inputs.sslsecretpassword }}" -input_file_path="${{ inputs.filepath }}" -output_dir_path="ssl-output"

          fi

          sudo cp -r ./ssl-output/* ../
        fi
      shell: bash
    - name: Sign File(s) PWSH
      env:
        FILE_PATH: ${{ inputs.filepath }}
        SSL_USERNAME: ${{ inputs.sslusername }}
        SSL_PASSWORD: ${{ inputs.sslpassword }}
        SSL_SECRET_PASSWORD: ${{ inputs.sslsecretpassword }}
        IS_TEST: ${{ inputs.istest }}
      run: |
        Write-Host $Env:RUNNER_OS

        if ($Env:RUNNER_OS -eq "Windows")
        {
          cd CodeSignTool-v1.2.0-windows

          if ($Env:IS_TEST -eq $true)
          {
            # TESTING ONLY - Sandbox creds    

            printf "CLIENT_ID=qOUeZCCzSqgA93acB3LYq6lBNjgZdiOxQc-KayC3UMw\nOAUTH2_ENDPOINT=https://oauth-sandbox.ssl.com/oauth2/token\nCSC_API_ENDPOINT=https://cs-try.ssl.com\nTSA_URL=http://ts.ssl.com" > 'conf/code_sign_tool.properties'
            .\CodeSignTool.bat sign -username="esigner_demo" -password="esignerDemo#1" -totp_secret="RDXYgV9qju+6/7GnMf1vCbKexXVJmUVr+86Wq/8aIGg=" -input_file_path="$Env:FILE_PATH" -output_dir_path="ssl-output"  
          }
          else
          {
            # SINGLE FILE
            .\CodeSignTool.bat sign -username="$Env:SSL_USERNAME" -password="$Env:SSL_PASSWORD" -totp_secret="$Env:SSL_SECRET_PASSWORD" -input_file_path="$Env:FILE_PATH" -output_dir_path="ssl-output"

          }
          Copy-Item -Path ".\ssl-output\*" -Destination "..\" -Recurse
        }
      shell: pwsh
