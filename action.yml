name: 'Sign File'

description: "Sign a file using SSL.com's CodeSignTool"

inputs:
  file-path:
    description: 'File to be signed'
    required: true
    # default: 'World'
  ssl-username:
    description: 'SSL.com account username'
    required: true
  ssl-password:
    description: 'SSL.com account password'
    required: true
  ssl-secret-password:
    description: 'SSL.com account TOTP secret'
    required: true
  is-test:
    description: 'When true, runs against SSL.com sandbox account'
    required: false
    default: false
runs:
  using: 'composite'
  steps:
    - name: Add masks
      run: |
        echo ::add-mask::${{ inputs.ssl-username }}
        echo ::add-mask::${{ inputs.ssl-password }}
        echo ::add-mask::${{ inputs.ssl-secret-password }}
        echo ::add-mask::totp_secret
      shell: bash
    - name: Download and Setup CodeSignTool
      run: |

        if [ "$RUNNER_OS" == "Windows" ]; then
          curl https://www.ssl.com/download/29773/ --output CodeSignTool.zip
          dir
          choco install javaruntime
          7z x CodeSignTool.zip
          
          dir
          cd CodeSignTool-v1.2.0-windows
          dir
        else
          curl https://www.ssl.com/download/29764/ --output CodeSignTool.zip
          
          sudo apt-get install -y unzip
          sudo apt-get install -y default-jre
          unzip -o CodeSignTool.zip

          dir
          cd CodeSignTool-v1.2.0
          dir
        fi

      shell: bash
    - name: Sign File(s) Bash
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          dir
          cd CodeSignTool-v1.2.0

          dir
          mkdir -p "ssl-output"
          dir

          if [ ${{ inputs.is-test }} = true ] ; then

            # TESTING ONLY - Sandbox creds

            printf "CLIENT_ID=qOUeZCCzSqgA93acB3LYq6lBNjgZdiOxQc-KayC3UMw\nOAUTH2_ENDPOINT=https://oauth-sandbox.ssl.com/oauth2/token\nCSC_API_ENDPOINT=https://cs-try.ssl.com\nTSA_URL=http://ts.ssl.com" > 'conf/code_sign_tool.properties'
            bash -eu CodeSignTool.sh sign -username="esigner_demo" -password="esignerDemo#1" -totp_secret="RDXYgV9qju+6/7GnMf1vCbKexXVJmUVr+86Wq/8aIGg=" -input_file_path="../miscellaneous/fake-file.ps1" -output_dir_path="ssl-output"

          else

            # SINGLE FILE
            bash -eu CodeSignTool.sh sign -username="${{ inputs.ssl-username }}" -password="${{ inputs.ssl-password }}" -totp_secret="${{ inputs.ssl-secret-password }}" -input_file_path="${{ inputs.file-path }}" -output_dir_path="ssl-output"

          fi

          sudo cp -r ./ssl-output/* ../
        fi
      shell: bash
    - name: Sign File(s) CMD
      run: |
        Write-Host $RUNNER_OS
        Write-Host %$RUNNER_OS%
        Write-Host %RUNNER_OS%

        if ($RUNNER_OS == "Windows")
        {
          dir
          cd CodeSignTool-v1.2.0-windows
          
          dir
          mkdir -p "ssl-output"
          dir

          if ($inputs:is-test == true)
          {
            # TESTING ONLY - Sandbox creds    

            printf "CLIENT_ID=qOUeZCCzSqgA93acB3LYq6lBNjgZdiOxQc-KayC3UMw\nOAUTH2_ENDPOINT=https://oauth-sandbox.ssl.com/oauth2/token\nCSC_API_ENDPOINT=https://cs-try.ssl.com\nTSA_URL=http://ts.ssl.com" > 'conf/code_sign_tool.properties'
            CodeSignTool.bat sign -username="esigner_demo" -password="esignerDemo#1" -totp_secret="RDXYgV9qju+6/7GnMf1vCbKexXVJmUVr+86Wq/8aIGg=" -input_file_path="../miscellaneous/fake-file.ps1" -output_dir_path="ssl-output"  
          }
          else
          {
            # SINGLE FILE
            bash -eu CodeSignTool.sh sign -username="${{ inputs:ssl-username }}" -password="${{ inputs:ssl-password }}" -totp_secret="${{ inputs:ssl-secret-password }}" -input_file_path="${{ inputs:file-path }}" -output_dir_path="ssl-output"

          }

          sudo cp -r ./ssl-output/* ../
        }
      shell: pwsh
